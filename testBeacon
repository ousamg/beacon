#!/usr/bin/env python2
from __future__ import print_function

import imp
import json
import os.path
import sys
import urllib2
import unittest

if os.path.isfile("query"):
    imp.load_source("query", "query")  # query does not have the .py extension
    import query as beaconServer
else:
    print("Cannot locate query file, cannot test")
    sys.exit(1)

baseUrl = None
if len(sys.argv) != 1:
    baseUrl = sys.argv[1]
    if len(baseUrl) < 9 or baseUrl[:4] != "http":
        baseUrl = "http://" + baseUrl
    print("Using baseUrl: '{}'".format(baseUrl))


def queryServer(chrom, pos, alternateBases, referenceBases, reference, dataset):
    " if baseUrl is set, query via http. Otherwise just call the script directly "
    if baseUrl is None:
        ret = beaconServer.lookupAlleleJson(chrom, pos, alternateBases, referenceBases, reference, dataset)
    else:
        url = baseUrl + "?chromosome={}&position={}&alternateBases={}".format(chrom, pos, alternateBases)
        if reference != "":
            url = url + "&reference={}".format(reference)
        if dataset != "":
            url = url + "&dataset={}".format(dataset)

        data = urllib2.urlopen(url).read()
        ret = json.loads(data)
    return ret


class TestBeacon(unittest.TestCase):
    def test_outside(self):
        " test query, beacon "
        maxInt = 2147483646
        rep = queryServer("1", str(maxInt), "T", "", "", "test")
        self.assertTrue(rep["query"]["position"] == maxInt)
        self.assertTrue(rep["query"]["reference"] == "GRCh37")
        self.assertTrue(rep["query"]["alternateBases"] == "T")
        self.assertTrue(rep["query"]["chromosome"] == "1")
        self.assertTrue(rep["response"]["exists"] is False)

        bi = rep["beacon"]
        self.assertTrue(bi["id"] != "")
        self.assertTrue(bi["name"] != "")
        self.assertTrue(bi["organization"] != "")
        self.assertTrue(bi["description"] != "")
        self.assertTrue(bi["api"] != "")

    # disable test because it doens't actually do anything, but keep around as reference for the "force true" response
    # def test_allele(self):
    #     " test true reply with the special testing chromosome"
    #     pos = 0
    #     rep = queryServer("test", str(pos), "A", "", "", "test")
    #     self.assertTrue(rep["response"]["exists"] is True)

    def test_allele_true(self):
        "test true reply with known variant entry"
        pos = "10150"
        chrom = "1"
        ab = "A"
        rb = ""
        ref = "GRCh37"
        ds = "test"
        rep = queryServer(chrom, pos, ab, rb, ref, ds)
        self.assertTrue(rep["response"]["exists"] is True)

    def test_allele_false(self):
        " test false reply "
        pos = 10000
        rep = queryServer("test", str(pos), "A", "", "", "test")
        self.assertTrue(rep["response"]["exists"] is False)

    def test_insertion_true(self):
        "test insertions found response"
        chrom = "1"
        pos = "13416"
        ab = "IGAGA"
        rb = ""
        ref = "GRCh37"
        ds = "test"
        rep = queryServer(chrom, pos, ab, rb, ref, ds)
        self.assertTrue(rep["response"]["exists"] is True)

    def test_insertion_false(self):
        "test insertions not found response"
        chrom = "1"
        pos = "13416"
        ab = "IGAAG"
        rb = ""
        ref = "GRCh37"
        ds = "test"
        rep = queryServer(chrom, pos, ab, rb, ref, ds)
        self.assertTrue(rep["response"]["exists"] is False)

    def test_deletion_true(self):
        "test deletion found response"
        chrom = "1"
        pos = "534447"
        ab = "D4"
        rb = ""
        ref = "GRCh37"
        ds = "test"
        rep = queryServer(chrom, pos, ab, rb, ref, ds)
        self.assertTrue(rep["response"]["exists"] is True)

    def test_deletion_false(self):
        "test deletion not found response"
        chrom = "1"
        pos = "534447"
        ab = "D2"
        rb = ""
        ref = "GRCh37"
        ds = "test"
        rep = queryServer(chrom, pos, ab, rb, ref, ds)
        self.assertTrue(rep["response"]["exists"] is False)


suite = unittest.TestLoader().loadTestsFromTestCase(TestBeacon)
unittest.TextTestRunner(verbosity=2).run(suite)
